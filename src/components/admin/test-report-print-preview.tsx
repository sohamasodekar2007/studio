// src/components/admin/test-report-print-preview.tsx
'use client';

import { useEffect, useRef } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import type { GeneratedTest, TestResultSummary, UserProfile } from '@/types';
import { Printer, X } from 'lucide-react';

interface TestReportPrintPreviewProps {
  reportData: {
    test: GeneratedTest;
    // Update attempts type to match the data structure passed from the parent
    attempts: Array<TestResultSummary & { user?: Omit<UserProfile, 'password'> | null; rank?: number }>;
  } | null;
  onClose: () => void;
}

export default function TestReportPrintPreview({ reportData, onClose }: TestReportPrintPreviewProps) {
  const printAreaRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // Automatically trigger print dialog when component mounts with data
    if (reportData) {
      // Delay slightly to ensure content is rendered
      setTimeout(() => {
        handlePrint();
      }, 500);
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [reportData]); // Only re-run if reportData changes

  const handlePrint = () => {
    const printContent = printAreaRef.current;
    if (printContent) {
      const originalContents = document.body.innerHTML;
      const printSection = printContent.innerHTML;

      // Create a new window or iframe for printing to isolate styles
      const printWindow = window.open('', '_blank', 'height=600,width=800');
      if (printWindow) {
        printWindow.document.write('<html><head><title>Test Report</title>');
        // Optional: Add specific print styles here
        printWindow.document.write(`
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; color: #333; }
            table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; font-size: 0.9em; } /* Smaller font */
            th { background-color: #f2f2f2; }
            h1, h2, h3 { color: #333; }
            .print-header { text-align: center; margin-bottom: 20px; }
            .print-footer { text-align: center; margin-top: 30px; font-size: 0.8em; color: #777; }
            @media print {
              body { -webkit-print-color-adjust: exact; print-color-adjust: exact; }
              .no-print { display: none; }
            }
          </style>
        `);
        printWindow.document.write('</head><body>');
        printWindow.document.write(printSection);
        printWindow.document.write('<div class="print-footer">Generated by ExamPrep Hub - STUDY SPHERE</div>');
        printWindow.document.write('</body></html>');
        printWindow.document.close(); // Necessary for IE >= 10
        printWindow.focus(); // Necessary for IE >= 10
        printWindow.print();
        // Closing automatically might be too fast for some browsers
        // printWindow.close();
      } else {
        alert("Could not open print window. Please check your browser's pop-up settings.");
      }
    }
  };

  if (!reportData) return null;

  const { test, attempts } = reportData;

  return (
    <Dialog open={!!reportData} onOpenChange={(open) => !open && onClose()}>
      <DialogContent className="sm:max-w-4xl max-h-[90vh] flex flex-col"> {/* Wider dialog */}
        <DialogHeader>
          <DialogTitle>Print Preview: {test.name}</DialogTitle>
          <DialogDescription>
            Review the report for Test Code: {test.test_code}. Click "Print Report" to print.
          </DialogDescription>
        </DialogHeader>

        <div ref={printAreaRef} className="flex-grow overflow-y-auto p-1 pr-2">
          <div className="print-header">
            <h1>Test Report: {test.name}</h1>
            <p><strong>Test Code:</strong> {test.test_code} | <strong>Duration:</strong> {test.duration} mins | <strong>Total Marks:</strong> {attempts[0]?.totalMarks ?? test.total_questions}</p>
          </div>

          <h2 style={{ marginTop: '20px', marginBottom: '10px', borderBottom: '1px solid #ccc', paddingBottom: '5px' }}>User Rankings & Scores</h2>
          {attempts.length > 0 ? (
            <table>
              <thead>
                <tr>
                  <th>Rank</th>
                  <th>User Name</th>
                  <th>Email</th>
                  <th>Score</th>
                  <th>Percentage</th>
                  <th>Submitted At</th>
                </tr>
              </thead>
              <tbody>
                 {/* Display only top 40 ranks in print */}
                {attempts.slice(0, 40).map((attempt) => (
                  <tr key={attempt.attemptTimestamp}> {/* Use timestamp as key */}
                    <td>{attempt.rank}</td>
                    <td>{attempt.user?.name || 'N/A'}</td>
                    <td>{attempt.user?.email || 'N/A'}</td>
                    {/* Display total marks if available */}
                    <td>{attempt.score ?? 'N/A'} / {attempt.totalMarks ?? attempt.totalQuestions ?? 'N/A'}</td>
                    <td>{attempt.percentage?.toFixed(2) ?? 'N/A'}%</td>
                    <td>{new Date(attempt.submittedAt!).toLocaleString()}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          ) : (
            <p>No attempts recorded for this test.</p>
          )}
        </div>

        <DialogFooter className="mt-4 no-print">
          <Button variant="outline" onClick={onClose}><X className="mr-2 h-4 w-4" /> Close</Button>
          <Button onClick={handlePrint}><Printer className="mr-2 h-4 w-4" /> Print Report</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
